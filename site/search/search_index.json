{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sync WooCommerce \u2194 Odoo Bienvenue sur la documentation technique du projet de synchronisation WooCommerce \u2194 Odoo. Installation : voir le README.md API : voir la section API pour la documentation automatique des modules Python principaux. G\u00e9n\u00e9ration de la documentation Pour lancer la doc en local\u202f: mkdocs serve La documentation sera accessible sur http://localhost:8000 Pour g\u00e9n\u00e9rer la documentation statique\u202f: mkdocs build Le site statique sera g\u00e9n\u00e9r\u00e9 dans le dossier site/ .","title":"Accueil"},{"location":"#sync-woocommerce-odoo","text":"Bienvenue sur la documentation technique du projet de synchronisation WooCommerce \u2194 Odoo. Installation : voir le README.md API : voir la section API pour la documentation automatique des modules Python principaux.","title":"Sync WooCommerce \u2194 Odoo"},{"location":"#generation-de-la-documentation","text":"Pour lancer la doc en local\u202f: mkdocs serve La documentation sera accessible sur http://localhost:8000 Pour g\u00e9n\u00e9rer la documentation statique\u202f: mkdocs build Le site statique sera g\u00e9n\u00e9r\u00e9 dans le dossier site/ .","title":"G\u00e9n\u00e9ration de la documentation"},{"location":"reference/core/odoo_client/","text":"API : core/odoo_client.py core.odoo_client Client pour l'API Odoo. Ce module g\u00e8re toutes les interactions avec l'API Odoo via XML-RPC, incluant : - Cr\u00e9ation de commandes - Cr\u00e9ation de clients - Gestion des erreurs d'API OdooClient Client pour interagir avec l'API Odoo via XML-RPC. Utilise les param\u00e8tres de configuration pour l'authentification. Source code in core/odoo_client.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 class OdooClient : \"\"\" Client pour interagir avec l'API Odoo via XML-RPC. Utilise les param\u00e8tres de configuration pour l'authentification. \"\"\" def __init__ ( self ): \"\"\" Initialise le client Odoo avec les param\u00e8tres de configuration. \u00c9tablit la connexion XML-RPC et authentifie l'utilisateur. \"\"\" log_info ( \"Initialisation du client Odoo\" ) try : # Connexion aux endpoints XML-RPC d'Odoo log_info ( f \"Connexion \u00e0 l'API Odoo: { settings . ODOO_URL } \" ) self . common = xmlrpc . client . ServerProxy ( f \" { settings . ODOO_URL } /xmlrpc/2/common\" ) self . models = xmlrpc . client . ServerProxy ( f \" { settings . ODOO_URL } /xmlrpc/2/object\" ) # Authentification avec les credentials log_info ( \"Authentification Odoo en cours...\" ) self . uid = self . common . authenticate ( settings . ODOO_DB , settings . ODOO_USER , settings . ODOO_PASSWORD , {} ) if not self . uid : error_msg = \"\u00c9chec de l'authentification Odoo\" log_error ( error_msg ) raise OdooAPIError ( error_msg ) log_info ( \"Client Odoo initialis\u00e9 avec succ\u00e8s\" ) except Exception as e : error_msg = f \"Erreur lors de l'initialisation du client Odoo: { e } \" log_error ( error_msg , exc_info = e ) raise OdooAPIError ( error_msg ) @log_procedure ( \"Cr\u00e9ation de commande Odoo\" ) @sleep_and_retry @limits ( calls = 80 , period = 60 ) # 80 appels par minute (adapter selon quota Odoo) @retry ( wait = wait_exponential ( multiplier = 1 , min = 2 , max = 10 ), stop = stop_after_attempt ( 5 )) def create_order ( self , order_data ): \"\"\" Cr\u00e9e une nouvelle commande dans Odoo. Args: order_data (dict): Donn\u00e9es de la commande au format Odoo Returns: int: ID de la commande cr\u00e9\u00e9e dans Odoo Raises: OdooAPIError: Si une erreur survient lors de la cr\u00e9ation \"\"\" try : log_info ( \"Cr\u00e9ation d'une nouvelle commande dans Odoo\" ) start_time = time . time () # Log de l'appel API log_api_call ( \"Odoo\" , \"POST\" , \"sale.order/create\" ) # Cr\u00e9ation de la commande order_id = self . models . execute_kw ( settings . ODOO_DB , self . uid , settings . ODOO_PASSWORD , \"sale.order\" , \"create\" , [ order_data ] ) # Log de la performance duration = time . time () - start_time log_performance ( \"Cr\u00e9ation de commande Odoo\" , duration ) log_info ( f \"Commande Odoo cr\u00e9\u00e9e avec succ\u00e8s (ID: { order_id } )\" ) return order_id except Exception as e : error_msg = f \"Erreur lors de la cr\u00e9ation de la commande dans Odoo : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"Odoo\" , \"POST\" , \"sale.order/create\" , error = str ( e )) raise OdooAPIError ( error_msg ) @log_procedure ( \"Cr\u00e9ation de client Odoo\" ) @sleep_and_retry @limits ( calls = 80 , period = 60 ) # 80 appels par minute (adapter selon quota Odoo) @retry ( wait = wait_exponential ( multiplier = 1 , min = 2 , max = 10 ), stop = stop_after_attempt ( 5 )) def create_customer ( self , customer_data ): \"\"\" Cr\u00e9e un nouveau client dans Odoo. Args: customer_data (dict): Donn\u00e9es du client au format Odoo Returns: int: ID du client cr\u00e9\u00e9 dans Odoo Raises: OdooAPIError: Si une erreur survient lors de la cr\u00e9ation \"\"\" try : log_info ( \"Cr\u00e9ation d'un nouveau client dans Odoo\" ) start_time = time . time () # Log de l'appel API log_api_call ( \"Odoo\" , \"POST\" , \"res.partner/create\" ) # Cr\u00e9ation du client customer_id = self . models . execute_kw ( settings . ODOO_DB , self . uid , settings . ODOO_PASSWORD , \"res.partner\" , \"create\" , [ customer_data ] ) # Log de la performance duration = time . time () - start_time log_performance ( \"Cr\u00e9ation de client Odoo\" , duration ) log_info ( f \"Client Odoo cr\u00e9\u00e9 avec succ\u00e8s (ID: { customer_id } )\" ) return customer_id except Exception as e : error_msg = f \"Erreur lors de la cr\u00e9ation du client dans Odoo : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"Odoo\" , \"POST\" , \"res.partner/create\" , error = str ( e )) raise OdooAPIError ( error_msg ) common = xmlrpc . client . ServerProxy ( f ' { settings . ODOO_URL } /xmlrpc/2/common' ) instance-attribute models = xmlrpc . client . ServerProxy ( f ' { settings . ODOO_URL } /xmlrpc/2/object' ) instance-attribute uid = self . common . authenticate ( settings . ODOO_DB , settings . ODOO_USER , settings . ODOO_PASSWORD , {}) instance-attribute __init__ () Initialise le client Odoo avec les param\u00e8tres de configuration. \u00c9tablit la connexion XML-RPC et authentifie l'utilisateur. Source code in core/odoo_client.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def __init__ ( self ): \"\"\" Initialise le client Odoo avec les param\u00e8tres de configuration. \u00c9tablit la connexion XML-RPC et authentifie l'utilisateur. \"\"\" log_info ( \"Initialisation du client Odoo\" ) try : # Connexion aux endpoints XML-RPC d'Odoo log_info ( f \"Connexion \u00e0 l'API Odoo: { settings . ODOO_URL } \" ) self . common = xmlrpc . client . ServerProxy ( f \" { settings . ODOO_URL } /xmlrpc/2/common\" ) self . models = xmlrpc . client . ServerProxy ( f \" { settings . ODOO_URL } /xmlrpc/2/object\" ) # Authentification avec les credentials log_info ( \"Authentification Odoo en cours...\" ) self . uid = self . common . authenticate ( settings . ODOO_DB , settings . ODOO_USER , settings . ODOO_PASSWORD , {} ) if not self . uid : error_msg = \"\u00c9chec de l'authentification Odoo\" log_error ( error_msg ) raise OdooAPIError ( error_msg ) log_info ( \"Client Odoo initialis\u00e9 avec succ\u00e8s\" ) except Exception as e : error_msg = f \"Erreur lors de l'initialisation du client Odoo: { e } \" log_error ( error_msg , exc_info = e ) raise OdooAPIError ( error_msg ) create_customer ( customer_data ) Cr\u00e9e un nouveau client dans Odoo. Parameters: Name Type Description Default customer_data dict Donn\u00e9es du client au format Odoo required Returns: Name Type Description int ID du client cr\u00e9\u00e9 dans Odoo Raises: Type Description OdooAPIError Si une erreur survient lors de la cr\u00e9ation Source code in core/odoo_client.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 @log_procedure ( \"Cr\u00e9ation de client Odoo\" ) @sleep_and_retry @limits ( calls = 80 , period = 60 ) # 80 appels par minute (adapter selon quota Odoo) @retry ( wait = wait_exponential ( multiplier = 1 , min = 2 , max = 10 ), stop = stop_after_attempt ( 5 )) def create_customer ( self , customer_data ): \"\"\" Cr\u00e9e un nouveau client dans Odoo. Args: customer_data (dict): Donn\u00e9es du client au format Odoo Returns: int: ID du client cr\u00e9\u00e9 dans Odoo Raises: OdooAPIError: Si une erreur survient lors de la cr\u00e9ation \"\"\" try : log_info ( \"Cr\u00e9ation d'un nouveau client dans Odoo\" ) start_time = time . time () # Log de l'appel API log_api_call ( \"Odoo\" , \"POST\" , \"res.partner/create\" ) # Cr\u00e9ation du client customer_id = self . models . execute_kw ( settings . ODOO_DB , self . uid , settings . ODOO_PASSWORD , \"res.partner\" , \"create\" , [ customer_data ] ) # Log de la performance duration = time . time () - start_time log_performance ( \"Cr\u00e9ation de client Odoo\" , duration ) log_info ( f \"Client Odoo cr\u00e9\u00e9 avec succ\u00e8s (ID: { customer_id } )\" ) return customer_id except Exception as e : error_msg = f \"Erreur lors de la cr\u00e9ation du client dans Odoo : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"Odoo\" , \"POST\" , \"res.partner/create\" , error = str ( e )) raise OdooAPIError ( error_msg ) create_order ( order_data ) Cr\u00e9e une nouvelle commande dans Odoo. Parameters: Name Type Description Default order_data dict Donn\u00e9es de la commande au format Odoo required Returns: Name Type Description int ID de la commande cr\u00e9\u00e9e dans Odoo Raises: Type Description OdooAPIError Si une erreur survient lors de la cr\u00e9ation Source code in core/odoo_client.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @log_procedure ( \"Cr\u00e9ation de commande Odoo\" ) @sleep_and_retry @limits ( calls = 80 , period = 60 ) # 80 appels par minute (adapter selon quota Odoo) @retry ( wait = wait_exponential ( multiplier = 1 , min = 2 , max = 10 ), stop = stop_after_attempt ( 5 )) def create_order ( self , order_data ): \"\"\" Cr\u00e9e une nouvelle commande dans Odoo. Args: order_data (dict): Donn\u00e9es de la commande au format Odoo Returns: int: ID de la commande cr\u00e9\u00e9e dans Odoo Raises: OdooAPIError: Si une erreur survient lors de la cr\u00e9ation \"\"\" try : log_info ( \"Cr\u00e9ation d'une nouvelle commande dans Odoo\" ) start_time = time . time () # Log de l'appel API log_api_call ( \"Odoo\" , \"POST\" , \"sale.order/create\" ) # Cr\u00e9ation de la commande order_id = self . models . execute_kw ( settings . ODOO_DB , self . uid , settings . ODOO_PASSWORD , \"sale.order\" , \"create\" , [ order_data ] ) # Log de la performance duration = time . time () - start_time log_performance ( \"Cr\u00e9ation de commande Odoo\" , duration ) log_info ( f \"Commande Odoo cr\u00e9\u00e9e avec succ\u00e8s (ID: { order_id } )\" ) return order_id except Exception as e : error_msg = f \"Erreur lors de la cr\u00e9ation de la commande dans Odoo : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"Odoo\" , \"POST\" , \"sale.order/create\" , error = str ( e )) raise OdooAPIError ( error_msg )","title":"odoo_client"},{"location":"reference/core/odoo_client/#api-coreodoo_clientpy","text":"","title":"API : core/odoo_client.py"},{"location":"reference/core/odoo_client/#core.odoo_client","text":"Client pour l'API Odoo. Ce module g\u00e8re toutes les interactions avec l'API Odoo via XML-RPC, incluant : - Cr\u00e9ation de commandes - Cr\u00e9ation de clients - Gestion des erreurs d'API","title":"odoo_client"},{"location":"reference/core/odoo_client/#core.odoo_client.OdooClient","text":"Client pour interagir avec l'API Odoo via XML-RPC. Utilise les param\u00e8tres de configuration pour l'authentification. Source code in core/odoo_client.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 class OdooClient : \"\"\" Client pour interagir avec l'API Odoo via XML-RPC. Utilise les param\u00e8tres de configuration pour l'authentification. \"\"\" def __init__ ( self ): \"\"\" Initialise le client Odoo avec les param\u00e8tres de configuration. \u00c9tablit la connexion XML-RPC et authentifie l'utilisateur. \"\"\" log_info ( \"Initialisation du client Odoo\" ) try : # Connexion aux endpoints XML-RPC d'Odoo log_info ( f \"Connexion \u00e0 l'API Odoo: { settings . ODOO_URL } \" ) self . common = xmlrpc . client . ServerProxy ( f \" { settings . ODOO_URL } /xmlrpc/2/common\" ) self . models = xmlrpc . client . ServerProxy ( f \" { settings . ODOO_URL } /xmlrpc/2/object\" ) # Authentification avec les credentials log_info ( \"Authentification Odoo en cours...\" ) self . uid = self . common . authenticate ( settings . ODOO_DB , settings . ODOO_USER , settings . ODOO_PASSWORD , {} ) if not self . uid : error_msg = \"\u00c9chec de l'authentification Odoo\" log_error ( error_msg ) raise OdooAPIError ( error_msg ) log_info ( \"Client Odoo initialis\u00e9 avec succ\u00e8s\" ) except Exception as e : error_msg = f \"Erreur lors de l'initialisation du client Odoo: { e } \" log_error ( error_msg , exc_info = e ) raise OdooAPIError ( error_msg ) @log_procedure ( \"Cr\u00e9ation de commande Odoo\" ) @sleep_and_retry @limits ( calls = 80 , period = 60 ) # 80 appels par minute (adapter selon quota Odoo) @retry ( wait = wait_exponential ( multiplier = 1 , min = 2 , max = 10 ), stop = stop_after_attempt ( 5 )) def create_order ( self , order_data ): \"\"\" Cr\u00e9e une nouvelle commande dans Odoo. Args: order_data (dict): Donn\u00e9es de la commande au format Odoo Returns: int: ID de la commande cr\u00e9\u00e9e dans Odoo Raises: OdooAPIError: Si une erreur survient lors de la cr\u00e9ation \"\"\" try : log_info ( \"Cr\u00e9ation d'une nouvelle commande dans Odoo\" ) start_time = time . time () # Log de l'appel API log_api_call ( \"Odoo\" , \"POST\" , \"sale.order/create\" ) # Cr\u00e9ation de la commande order_id = self . models . execute_kw ( settings . ODOO_DB , self . uid , settings . ODOO_PASSWORD , \"sale.order\" , \"create\" , [ order_data ] ) # Log de la performance duration = time . time () - start_time log_performance ( \"Cr\u00e9ation de commande Odoo\" , duration ) log_info ( f \"Commande Odoo cr\u00e9\u00e9e avec succ\u00e8s (ID: { order_id } )\" ) return order_id except Exception as e : error_msg = f \"Erreur lors de la cr\u00e9ation de la commande dans Odoo : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"Odoo\" , \"POST\" , \"sale.order/create\" , error = str ( e )) raise OdooAPIError ( error_msg ) @log_procedure ( \"Cr\u00e9ation de client Odoo\" ) @sleep_and_retry @limits ( calls = 80 , period = 60 ) # 80 appels par minute (adapter selon quota Odoo) @retry ( wait = wait_exponential ( multiplier = 1 , min = 2 , max = 10 ), stop = stop_after_attempt ( 5 )) def create_customer ( self , customer_data ): \"\"\" Cr\u00e9e un nouveau client dans Odoo. Args: customer_data (dict): Donn\u00e9es du client au format Odoo Returns: int: ID du client cr\u00e9\u00e9 dans Odoo Raises: OdooAPIError: Si une erreur survient lors de la cr\u00e9ation \"\"\" try : log_info ( \"Cr\u00e9ation d'un nouveau client dans Odoo\" ) start_time = time . time () # Log de l'appel API log_api_call ( \"Odoo\" , \"POST\" , \"res.partner/create\" ) # Cr\u00e9ation du client customer_id = self . models . execute_kw ( settings . ODOO_DB , self . uid , settings . ODOO_PASSWORD , \"res.partner\" , \"create\" , [ customer_data ] ) # Log de la performance duration = time . time () - start_time log_performance ( \"Cr\u00e9ation de client Odoo\" , duration ) log_info ( f \"Client Odoo cr\u00e9\u00e9 avec succ\u00e8s (ID: { customer_id } )\" ) return customer_id except Exception as e : error_msg = f \"Erreur lors de la cr\u00e9ation du client dans Odoo : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"Odoo\" , \"POST\" , \"res.partner/create\" , error = str ( e )) raise OdooAPIError ( error_msg )","title":"OdooClient"},{"location":"reference/core/odoo_client/#core.odoo_client.OdooClient.common","text":"","title":"common"},{"location":"reference/core/odoo_client/#core.odoo_client.OdooClient.models","text":"","title":"models"},{"location":"reference/core/odoo_client/#core.odoo_client.OdooClient.uid","text":"","title":"uid"},{"location":"reference/core/odoo_client/#core.odoo_client.OdooClient.__init__","text":"Initialise le client Odoo avec les param\u00e8tres de configuration. \u00c9tablit la connexion XML-RPC et authentifie l'utilisateur. Source code in core/odoo_client.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def __init__ ( self ): \"\"\" Initialise le client Odoo avec les param\u00e8tres de configuration. \u00c9tablit la connexion XML-RPC et authentifie l'utilisateur. \"\"\" log_info ( \"Initialisation du client Odoo\" ) try : # Connexion aux endpoints XML-RPC d'Odoo log_info ( f \"Connexion \u00e0 l'API Odoo: { settings . ODOO_URL } \" ) self . common = xmlrpc . client . ServerProxy ( f \" { settings . ODOO_URL } /xmlrpc/2/common\" ) self . models = xmlrpc . client . ServerProxy ( f \" { settings . ODOO_URL } /xmlrpc/2/object\" ) # Authentification avec les credentials log_info ( \"Authentification Odoo en cours...\" ) self . uid = self . common . authenticate ( settings . ODOO_DB , settings . ODOO_USER , settings . ODOO_PASSWORD , {} ) if not self . uid : error_msg = \"\u00c9chec de l'authentification Odoo\" log_error ( error_msg ) raise OdooAPIError ( error_msg ) log_info ( \"Client Odoo initialis\u00e9 avec succ\u00e8s\" ) except Exception as e : error_msg = f \"Erreur lors de l'initialisation du client Odoo: { e } \" log_error ( error_msg , exc_info = e ) raise OdooAPIError ( error_msg )","title":"__init__"},{"location":"reference/core/odoo_client/#core.odoo_client.OdooClient.create_customer","text":"Cr\u00e9e un nouveau client dans Odoo. Parameters: Name Type Description Default customer_data dict Donn\u00e9es du client au format Odoo required Returns: Name Type Description int ID du client cr\u00e9\u00e9 dans Odoo Raises: Type Description OdooAPIError Si une erreur survient lors de la cr\u00e9ation Source code in core/odoo_client.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 @log_procedure ( \"Cr\u00e9ation de client Odoo\" ) @sleep_and_retry @limits ( calls = 80 , period = 60 ) # 80 appels par minute (adapter selon quota Odoo) @retry ( wait = wait_exponential ( multiplier = 1 , min = 2 , max = 10 ), stop = stop_after_attempt ( 5 )) def create_customer ( self , customer_data ): \"\"\" Cr\u00e9e un nouveau client dans Odoo. Args: customer_data (dict): Donn\u00e9es du client au format Odoo Returns: int: ID du client cr\u00e9\u00e9 dans Odoo Raises: OdooAPIError: Si une erreur survient lors de la cr\u00e9ation \"\"\" try : log_info ( \"Cr\u00e9ation d'un nouveau client dans Odoo\" ) start_time = time . time () # Log de l'appel API log_api_call ( \"Odoo\" , \"POST\" , \"res.partner/create\" ) # Cr\u00e9ation du client customer_id = self . models . execute_kw ( settings . ODOO_DB , self . uid , settings . ODOO_PASSWORD , \"res.partner\" , \"create\" , [ customer_data ] ) # Log de la performance duration = time . time () - start_time log_performance ( \"Cr\u00e9ation de client Odoo\" , duration ) log_info ( f \"Client Odoo cr\u00e9\u00e9 avec succ\u00e8s (ID: { customer_id } )\" ) return customer_id except Exception as e : error_msg = f \"Erreur lors de la cr\u00e9ation du client dans Odoo : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"Odoo\" , \"POST\" , \"res.partner/create\" , error = str ( e )) raise OdooAPIError ( error_msg )","title":"create_customer"},{"location":"reference/core/odoo_client/#core.odoo_client.OdooClient.create_order","text":"Cr\u00e9e une nouvelle commande dans Odoo. Parameters: Name Type Description Default order_data dict Donn\u00e9es de la commande au format Odoo required Returns: Name Type Description int ID de la commande cr\u00e9\u00e9e dans Odoo Raises: Type Description OdooAPIError Si une erreur survient lors de la cr\u00e9ation Source code in core/odoo_client.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @log_procedure ( \"Cr\u00e9ation de commande Odoo\" ) @sleep_and_retry @limits ( calls = 80 , period = 60 ) # 80 appels par minute (adapter selon quota Odoo) @retry ( wait = wait_exponential ( multiplier = 1 , min = 2 , max = 10 ), stop = stop_after_attempt ( 5 )) def create_order ( self , order_data ): \"\"\" Cr\u00e9e une nouvelle commande dans Odoo. Args: order_data (dict): Donn\u00e9es de la commande au format Odoo Returns: int: ID de la commande cr\u00e9\u00e9e dans Odoo Raises: OdooAPIError: Si une erreur survient lors de la cr\u00e9ation \"\"\" try : log_info ( \"Cr\u00e9ation d'une nouvelle commande dans Odoo\" ) start_time = time . time () # Log de l'appel API log_api_call ( \"Odoo\" , \"POST\" , \"sale.order/create\" ) # Cr\u00e9ation de la commande order_id = self . models . execute_kw ( settings . ODOO_DB , self . uid , settings . ODOO_PASSWORD , \"sale.order\" , \"create\" , [ order_data ] ) # Log de la performance duration = time . time () - start_time log_performance ( \"Cr\u00e9ation de commande Odoo\" , duration ) log_info ( f \"Commande Odoo cr\u00e9\u00e9e avec succ\u00e8s (ID: { order_id } )\" ) return order_id except Exception as e : error_msg = f \"Erreur lors de la cr\u00e9ation de la commande dans Odoo : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"Odoo\" , \"POST\" , \"sale.order/create\" , error = str ( e )) raise OdooAPIError ( error_msg )","title":"create_order"},{"location":"reference/core/sync_manager/","text":"API : core/sync_manager.py core.sync_manager Gestionnaire principal de la synchronisation entre WooCommerce et Odoo. Cette classe orchestre le processus de synchronisation des commandes, incluant : - R\u00e9cup\u00e9ration des commandes WooCommerce - Validation des donn\u00e9es - Transformation des donn\u00e9es - Cr\u00e9ation des commandes dans Odoo - Suivi de la synchronisation dans la base de donn\u00e9es locale SyncManager Gestionnaire de synchronisation qui coordonne le processus de transfert des commandes de WooCommerce vers Odoo. Source code in core/sync_manager.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 class SyncManager : \"\"\" Gestionnaire de synchronisation qui coordonne le processus de transfert des commandes de WooCommerce vers Odoo. \"\"\" def __init__ ( self ): \"\"\" Initialise les clients WooCommerce et Odoo, et la base de donn\u00e9es locale. \"\"\" log_info ( \"Initialisation du gestionnaire de synchronisation\" ) self . wc = WooCommerceClient () self . odoo = OdooClient () init_db () log_info ( \"Gestionnaire de synchronisation initialis\u00e9\" ) @log_procedure ( \"Synchronisation des commandes\" ) def sync_orders ( self ): \"\"\" Synchronise les commandes de WooCommerce vers Odoo. Le processus comprend : 1. R\u00e9cup\u00e9ration des commandes WooCommerce 2. Pour chaque commande : - V\u00e9rification si d\u00e9j\u00e0 synchronis\u00e9e - Validation des donn\u00e9es - Transformation en format Odoo - Cr\u00e9ation dans Odoo - Marquage comme synchronis\u00e9e - Journalisation de l'audit \"\"\" try : # R\u00e9cup\u00e9ration de la date de derni\u00e8re synchronisation last_synced = get_last_synced_at () log_info ( f \"Derni\u00e8re synchronisation \u00e0 : { last_synced } \" ) # R\u00e9cup\u00e9ration des commandes WooCommerce incr\u00e9mentale start_time = time . time () orders = self . wc . get_orders ( after = last_synced ) if last_synced else self . wc . get_orders () log_performance ( \"R\u00e9cup\u00e9ration des commandes WooCommerce\" , time . time () - start_time ) log_info ( f \" { len ( orders ) } commandes r\u00e9cup\u00e9r\u00e9es\" ) for order in orders : try : order_id = order [ \"id\" ] log_sync_operation ( \"order_processing\" , { \"order_id\" : order_id }) # V\u00e9rification si la commande a d\u00e9j\u00e0 \u00e9t\u00e9 synchronis\u00e9e if is_order_already_synced_db ( order_id ): log_warning ( f \"Commande { order_id } d\u00e9j\u00e0 synchronis\u00e9e\" ) log_audit ( order_id , \"ignored\" , \"D\u00e9j\u00e0 synchronis\u00e9e\" ) continue # Validation des donn\u00e9es de la commande log_info ( f \"Validation de la commande { order_id } \" ) validate_order ( order ) # Transformation des donn\u00e9es pour Odoo log_info ( f \"Transformation de la commande { order_id } \" ) start_time = time . time () odoo_order_data = map_wc_order_to_odoo ( order ) log_performance ( f \"Transformation commande { order_id } \" , time . time () - start_time ) log_data_transformation ( \"WooCommerce\" , \"Odoo\" , order_id , \"Transformation des donn\u00e9es pour Odoo termin\u00e9e\" ) # Cr\u00e9ation de la commande dans Odoo log_info ( f \"Cr\u00e9ation de la commande { order_id } dans Odoo\" ) start_time = time . time () self . odoo . create_order ( odoo_order_data ) log_performance ( f \"Cr\u00e9ation commande Odoo { order_id } \" , time . time () - start_time ) # Marquage de la commande comme synchronis\u00e9e mark_order_as_synced_db ( order_id ) log_info ( f \"Commande { order_id } marqu\u00e9e comme synchronis\u00e9e\" ) log_audit ( order_id , \"success\" , \"Synchronisation OK\" ) log_sync_operation ( \"order_success\" , { \"order_id\" : order_id }) except Exception as ve : log_error ( f \"Erreur lors du traitement de la commande { order . get ( 'id' , '?' ) } \" , exc_info = ve ) log_audit ( order . get ( 'id' , '?' ), \"error\" , str ( ve )) log_sync_operation ( \"order_error\" , { \"order_id\" : order . get ( 'id' , '?' ), \"error\" : str ( ve ) }) # Mise \u00e0 jour de la date de derni\u00e8re synchronisation set_last_synced_at () except Exception as e : log_error ( \"Erreur lors de la synchronisation\" , exc_info = e ) raise odoo = OdooClient () instance-attribute wc = WooCommerceClient () instance-attribute __init__ () Initialise les clients WooCommerce et Odoo, et la base de donn\u00e9es locale. Source code in core/sync_manager.py 32 33 34 35 36 37 38 39 40 def __init__ ( self ): \"\"\" Initialise les clients WooCommerce et Odoo, et la base de donn\u00e9es locale. \"\"\" log_info ( \"Initialisation du gestionnaire de synchronisation\" ) self . wc = WooCommerceClient () self . odoo = OdooClient () init_db () log_info ( \"Gestionnaire de synchronisation initialis\u00e9\" ) sync_orders () Synchronise les commandes de WooCommerce vers Odoo. Le processus comprend : 1. R\u00e9cup\u00e9ration des commandes WooCommerce 2. Pour chaque commande : - V\u00e9rification si d\u00e9j\u00e0 synchronis\u00e9e - Validation des donn\u00e9es - Transformation en format Odoo - Cr\u00e9ation dans Odoo - Marquage comme synchronis\u00e9e - Journalisation de l'audit Source code in core/sync_manager.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 @log_procedure ( \"Synchronisation des commandes\" ) def sync_orders ( self ): \"\"\" Synchronise les commandes de WooCommerce vers Odoo. Le processus comprend : 1. R\u00e9cup\u00e9ration des commandes WooCommerce 2. Pour chaque commande : - V\u00e9rification si d\u00e9j\u00e0 synchronis\u00e9e - Validation des donn\u00e9es - Transformation en format Odoo - Cr\u00e9ation dans Odoo - Marquage comme synchronis\u00e9e - Journalisation de l'audit \"\"\" try : # R\u00e9cup\u00e9ration de la date de derni\u00e8re synchronisation last_synced = get_last_synced_at () log_info ( f \"Derni\u00e8re synchronisation \u00e0 : { last_synced } \" ) # R\u00e9cup\u00e9ration des commandes WooCommerce incr\u00e9mentale start_time = time . time () orders = self . wc . get_orders ( after = last_synced ) if last_synced else self . wc . get_orders () log_performance ( \"R\u00e9cup\u00e9ration des commandes WooCommerce\" , time . time () - start_time ) log_info ( f \" { len ( orders ) } commandes r\u00e9cup\u00e9r\u00e9es\" ) for order in orders : try : order_id = order [ \"id\" ] log_sync_operation ( \"order_processing\" , { \"order_id\" : order_id }) # V\u00e9rification si la commande a d\u00e9j\u00e0 \u00e9t\u00e9 synchronis\u00e9e if is_order_already_synced_db ( order_id ): log_warning ( f \"Commande { order_id } d\u00e9j\u00e0 synchronis\u00e9e\" ) log_audit ( order_id , \"ignored\" , \"D\u00e9j\u00e0 synchronis\u00e9e\" ) continue # Validation des donn\u00e9es de la commande log_info ( f \"Validation de la commande { order_id } \" ) validate_order ( order ) # Transformation des donn\u00e9es pour Odoo log_info ( f \"Transformation de la commande { order_id } \" ) start_time = time . time () odoo_order_data = map_wc_order_to_odoo ( order ) log_performance ( f \"Transformation commande { order_id } \" , time . time () - start_time ) log_data_transformation ( \"WooCommerce\" , \"Odoo\" , order_id , \"Transformation des donn\u00e9es pour Odoo termin\u00e9e\" ) # Cr\u00e9ation de la commande dans Odoo log_info ( f \"Cr\u00e9ation de la commande { order_id } dans Odoo\" ) start_time = time . time () self . odoo . create_order ( odoo_order_data ) log_performance ( f \"Cr\u00e9ation commande Odoo { order_id } \" , time . time () - start_time ) # Marquage de la commande comme synchronis\u00e9e mark_order_as_synced_db ( order_id ) log_info ( f \"Commande { order_id } marqu\u00e9e comme synchronis\u00e9e\" ) log_audit ( order_id , \"success\" , \"Synchronisation OK\" ) log_sync_operation ( \"order_success\" , { \"order_id\" : order_id }) except Exception as ve : log_error ( f \"Erreur lors du traitement de la commande { order . get ( 'id' , '?' ) } \" , exc_info = ve ) log_audit ( order . get ( 'id' , '?' ), \"error\" , str ( ve )) log_sync_operation ( \"order_error\" , { \"order_id\" : order . get ( 'id' , '?' ), \"error\" : str ( ve ) }) # Mise \u00e0 jour de la date de derni\u00e8re synchronisation set_last_synced_at () except Exception as e : log_error ( \"Erreur lors de la synchronisation\" , exc_info = e ) raise","title":"sync_manager"},{"location":"reference/core/sync_manager/#api-coresync_managerpy","text":"","title":"API : core/sync_manager.py"},{"location":"reference/core/sync_manager/#core.sync_manager","text":"Gestionnaire principal de la synchronisation entre WooCommerce et Odoo. Cette classe orchestre le processus de synchronisation des commandes, incluant : - R\u00e9cup\u00e9ration des commandes WooCommerce - Validation des donn\u00e9es - Transformation des donn\u00e9es - Cr\u00e9ation des commandes dans Odoo - Suivi de la synchronisation dans la base de donn\u00e9es locale","title":"sync_manager"},{"location":"reference/core/sync_manager/#core.sync_manager.SyncManager","text":"Gestionnaire de synchronisation qui coordonne le processus de transfert des commandes de WooCommerce vers Odoo. Source code in core/sync_manager.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 class SyncManager : \"\"\" Gestionnaire de synchronisation qui coordonne le processus de transfert des commandes de WooCommerce vers Odoo. \"\"\" def __init__ ( self ): \"\"\" Initialise les clients WooCommerce et Odoo, et la base de donn\u00e9es locale. \"\"\" log_info ( \"Initialisation du gestionnaire de synchronisation\" ) self . wc = WooCommerceClient () self . odoo = OdooClient () init_db () log_info ( \"Gestionnaire de synchronisation initialis\u00e9\" ) @log_procedure ( \"Synchronisation des commandes\" ) def sync_orders ( self ): \"\"\" Synchronise les commandes de WooCommerce vers Odoo. Le processus comprend : 1. R\u00e9cup\u00e9ration des commandes WooCommerce 2. Pour chaque commande : - V\u00e9rification si d\u00e9j\u00e0 synchronis\u00e9e - Validation des donn\u00e9es - Transformation en format Odoo - Cr\u00e9ation dans Odoo - Marquage comme synchronis\u00e9e - Journalisation de l'audit \"\"\" try : # R\u00e9cup\u00e9ration de la date de derni\u00e8re synchronisation last_synced = get_last_synced_at () log_info ( f \"Derni\u00e8re synchronisation \u00e0 : { last_synced } \" ) # R\u00e9cup\u00e9ration des commandes WooCommerce incr\u00e9mentale start_time = time . time () orders = self . wc . get_orders ( after = last_synced ) if last_synced else self . wc . get_orders () log_performance ( \"R\u00e9cup\u00e9ration des commandes WooCommerce\" , time . time () - start_time ) log_info ( f \" { len ( orders ) } commandes r\u00e9cup\u00e9r\u00e9es\" ) for order in orders : try : order_id = order [ \"id\" ] log_sync_operation ( \"order_processing\" , { \"order_id\" : order_id }) # V\u00e9rification si la commande a d\u00e9j\u00e0 \u00e9t\u00e9 synchronis\u00e9e if is_order_already_synced_db ( order_id ): log_warning ( f \"Commande { order_id } d\u00e9j\u00e0 synchronis\u00e9e\" ) log_audit ( order_id , \"ignored\" , \"D\u00e9j\u00e0 synchronis\u00e9e\" ) continue # Validation des donn\u00e9es de la commande log_info ( f \"Validation de la commande { order_id } \" ) validate_order ( order ) # Transformation des donn\u00e9es pour Odoo log_info ( f \"Transformation de la commande { order_id } \" ) start_time = time . time () odoo_order_data = map_wc_order_to_odoo ( order ) log_performance ( f \"Transformation commande { order_id } \" , time . time () - start_time ) log_data_transformation ( \"WooCommerce\" , \"Odoo\" , order_id , \"Transformation des donn\u00e9es pour Odoo termin\u00e9e\" ) # Cr\u00e9ation de la commande dans Odoo log_info ( f \"Cr\u00e9ation de la commande { order_id } dans Odoo\" ) start_time = time . time () self . odoo . create_order ( odoo_order_data ) log_performance ( f \"Cr\u00e9ation commande Odoo { order_id } \" , time . time () - start_time ) # Marquage de la commande comme synchronis\u00e9e mark_order_as_synced_db ( order_id ) log_info ( f \"Commande { order_id } marqu\u00e9e comme synchronis\u00e9e\" ) log_audit ( order_id , \"success\" , \"Synchronisation OK\" ) log_sync_operation ( \"order_success\" , { \"order_id\" : order_id }) except Exception as ve : log_error ( f \"Erreur lors du traitement de la commande { order . get ( 'id' , '?' ) } \" , exc_info = ve ) log_audit ( order . get ( 'id' , '?' ), \"error\" , str ( ve )) log_sync_operation ( \"order_error\" , { \"order_id\" : order . get ( 'id' , '?' ), \"error\" : str ( ve ) }) # Mise \u00e0 jour de la date de derni\u00e8re synchronisation set_last_synced_at () except Exception as e : log_error ( \"Erreur lors de la synchronisation\" , exc_info = e ) raise","title":"SyncManager"},{"location":"reference/core/sync_manager/#core.sync_manager.SyncManager.odoo","text":"","title":"odoo"},{"location":"reference/core/sync_manager/#core.sync_manager.SyncManager.wc","text":"","title":"wc"},{"location":"reference/core/sync_manager/#core.sync_manager.SyncManager.__init__","text":"Initialise les clients WooCommerce et Odoo, et la base de donn\u00e9es locale. Source code in core/sync_manager.py 32 33 34 35 36 37 38 39 40 def __init__ ( self ): \"\"\" Initialise les clients WooCommerce et Odoo, et la base de donn\u00e9es locale. \"\"\" log_info ( \"Initialisation du gestionnaire de synchronisation\" ) self . wc = WooCommerceClient () self . odoo = OdooClient () init_db () log_info ( \"Gestionnaire de synchronisation initialis\u00e9\" )","title":"__init__"},{"location":"reference/core/sync_manager/#core.sync_manager.SyncManager.sync_orders","text":"Synchronise les commandes de WooCommerce vers Odoo. Le processus comprend : 1. R\u00e9cup\u00e9ration des commandes WooCommerce 2. Pour chaque commande : - V\u00e9rification si d\u00e9j\u00e0 synchronis\u00e9e - Validation des donn\u00e9es - Transformation en format Odoo - Cr\u00e9ation dans Odoo - Marquage comme synchronis\u00e9e - Journalisation de l'audit Source code in core/sync_manager.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 @log_procedure ( \"Synchronisation des commandes\" ) def sync_orders ( self ): \"\"\" Synchronise les commandes de WooCommerce vers Odoo. Le processus comprend : 1. R\u00e9cup\u00e9ration des commandes WooCommerce 2. Pour chaque commande : - V\u00e9rification si d\u00e9j\u00e0 synchronis\u00e9e - Validation des donn\u00e9es - Transformation en format Odoo - Cr\u00e9ation dans Odoo - Marquage comme synchronis\u00e9e - Journalisation de l'audit \"\"\" try : # R\u00e9cup\u00e9ration de la date de derni\u00e8re synchronisation last_synced = get_last_synced_at () log_info ( f \"Derni\u00e8re synchronisation \u00e0 : { last_synced } \" ) # R\u00e9cup\u00e9ration des commandes WooCommerce incr\u00e9mentale start_time = time . time () orders = self . wc . get_orders ( after = last_synced ) if last_synced else self . wc . get_orders () log_performance ( \"R\u00e9cup\u00e9ration des commandes WooCommerce\" , time . time () - start_time ) log_info ( f \" { len ( orders ) } commandes r\u00e9cup\u00e9r\u00e9es\" ) for order in orders : try : order_id = order [ \"id\" ] log_sync_operation ( \"order_processing\" , { \"order_id\" : order_id }) # V\u00e9rification si la commande a d\u00e9j\u00e0 \u00e9t\u00e9 synchronis\u00e9e if is_order_already_synced_db ( order_id ): log_warning ( f \"Commande { order_id } d\u00e9j\u00e0 synchronis\u00e9e\" ) log_audit ( order_id , \"ignored\" , \"D\u00e9j\u00e0 synchronis\u00e9e\" ) continue # Validation des donn\u00e9es de la commande log_info ( f \"Validation de la commande { order_id } \" ) validate_order ( order ) # Transformation des donn\u00e9es pour Odoo log_info ( f \"Transformation de la commande { order_id } \" ) start_time = time . time () odoo_order_data = map_wc_order_to_odoo ( order ) log_performance ( f \"Transformation commande { order_id } \" , time . time () - start_time ) log_data_transformation ( \"WooCommerce\" , \"Odoo\" , order_id , \"Transformation des donn\u00e9es pour Odoo termin\u00e9e\" ) # Cr\u00e9ation de la commande dans Odoo log_info ( f \"Cr\u00e9ation de la commande { order_id } dans Odoo\" ) start_time = time . time () self . odoo . create_order ( odoo_order_data ) log_performance ( f \"Cr\u00e9ation commande Odoo { order_id } \" , time . time () - start_time ) # Marquage de la commande comme synchronis\u00e9e mark_order_as_synced_db ( order_id ) log_info ( f \"Commande { order_id } marqu\u00e9e comme synchronis\u00e9e\" ) log_audit ( order_id , \"success\" , \"Synchronisation OK\" ) log_sync_operation ( \"order_success\" , { \"order_id\" : order_id }) except Exception as ve : log_error ( f \"Erreur lors du traitement de la commande { order . get ( 'id' , '?' ) } \" , exc_info = ve ) log_audit ( order . get ( 'id' , '?' ), \"error\" , str ( ve )) log_sync_operation ( \"order_error\" , { \"order_id\" : order . get ( 'id' , '?' ), \"error\" : str ( ve ) }) # Mise \u00e0 jour de la date de derni\u00e8re synchronisation set_last_synced_at () except Exception as e : log_error ( \"Erreur lors de la synchronisation\" , exc_info = e ) raise","title":"sync_orders"},{"location":"reference/core/validator/","text":"","title":"validator"},{"location":"reference/scripts/wc_client/","text":"API : core/wc_client.py core.wc_client Client pour l'API WooCommerce. Ce module g\u00e8re toutes les interactions avec l'API WooCommerce, incluant : - R\u00e9cup\u00e9ration des commandes - R\u00e9cup\u00e9ration des clients - Gestion des erreurs d'API WooCommerceClient Client pour interagir avec l'API WooCommerce. Utilise les param\u00e8tres de configuration pour l'authentification. Source code in core/wc_client.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 class WooCommerceClient : \"\"\" Client pour interagir avec l'API WooCommerce. Utilise les param\u00e8tres de configuration pour l'authentification. \"\"\" def __init__ ( self ): \"\"\" Initialise le client WooCommerce avec les param\u00e8tres de configuration. Utilise les variables d'environnement pour les credentials. \"\"\" log_info ( \"Initialisation du client WooCommerce\" ) self . wcapi = API ( url = settings . WC_API_URL , consumer_key = settings . WC_CONSUMER_KEY , consumer_secret = settings . WC_CONSUMER_SECRET , version = \"wc/v3\" ) log_info ( \"Client WooCommerce initialis\u00e9\" ) @log_procedure ( \"R\u00e9cup\u00e9ration des commandes WooCommerce\" ) @sleep_and_retry @limits ( calls = 80 , period = 60 ) # 80 appels par minute (adapter selon quota WooCommerce) @retry ( wait = wait_exponential ( multiplier = 1 , min = 2 , max = 10 ), stop = stop_after_attempt ( 5 )) def get_orders ( self , status = \"processing\" , after = None ): \"\"\" R\u00e9cup\u00e8re les commandes WooCommerce avec un statut sp\u00e9cifique et optionnellement apr\u00e8s une date donn\u00e9e. Args: status (str): Statut des commandes \u00e0 r\u00e9cup\u00e9rer (par d\u00e9faut: \"processing\") after (str): Date ISO 8601 (ex: '2024-01-01T00:00:00') pour ne r\u00e9cup\u00e9rer que les commandes r\u00e9centes Returns: list: Liste des commandes au format JSON Raises: WooCommerceAPIError: Si une erreur survient lors de l'appel API \"\"\" try : log_info ( f \"R\u00e9cup\u00e9ration des commandes avec le statut: { status } apr\u00e8s: { after } \" ) start_time = time . time () params = { \"status\" : status } if after : params [ \"after\" ] = after # Log de l'appel API log_api_call ( \"WooCommerce\" , \"GET\" , f \"orders?status= { status } &after= { after } \" ) # Appel \u00e0 l'API response = self . wcapi . get ( \"orders\" , params = params ) response . raise_for_status () # Log de la performance duration = time . time () - start_time log_performance ( \"R\u00e9cup\u00e9ration des commandes WooCommerce\" , duration ) # Log du r\u00e9sultat orders = response . json () log_info ( f \" { len ( orders ) } commandes r\u00e9cup\u00e9r\u00e9es\" ) return orders except requests . RequestException as e : error_msg = f \"Erreur lors de la r\u00e9cup\u00e9ration des commandes WooCommerce : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"WooCommerce\" , \"GET\" , \"orders\" , error = str ( e )) raise WooCommerceAPIError ( error_msg ) @log_procedure ( \"R\u00e9cup\u00e9ration des clients WooCommerce\" ) def get_customers ( self ): \"\"\" R\u00e9cup\u00e8re tous les clients WooCommerce. Returns: list: Liste des clients au format JSON Raises: WooCommerceAPIError: Si une erreur survient lors de l'appel API \"\"\" try : log_info ( \"R\u00e9cup\u00e9ration des clients\" ) start_time = time . time () # Log de l'appel API log_api_call ( \"WooCommerce\" , \"GET\" , \"customers\" ) # Appel \u00e0 l'API response = self . wcapi . get ( \"customers\" ) response . raise_for_status () # Log de la performance duration = time . time () - start_time log_performance ( \"R\u00e9cup\u00e9ration des clients WooCommerce\" , duration ) # Log du r\u00e9sultat customers = response . json () log_info ( f \" { len ( customers ) } clients r\u00e9cup\u00e9r\u00e9s\" ) return customers except requests . RequestException as e : error_msg = f \"Erreur lors de la r\u00e9cup\u00e9ration des clients WooCommerce : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"WooCommerce\" , \"GET\" , \"customers\" , error = str ( e )) raise WooCommerceAPIError ( error_msg ) wcapi = API ( url = settings . WC_API_URL , consumer_key = settings . WC_CONSUMER_KEY , consumer_secret = settings . WC_CONSUMER_SECRET , version = 'wc/v3' ) instance-attribute __init__ () Initialise le client WooCommerce avec les param\u00e8tres de configuration. Utilise les variables d'environnement pour les credentials. Source code in core/wc_client.py 27 28 29 30 31 32 33 34 35 36 37 38 39 def __init__ ( self ): \"\"\" Initialise le client WooCommerce avec les param\u00e8tres de configuration. Utilise les variables d'environnement pour les credentials. \"\"\" log_info ( \"Initialisation du client WooCommerce\" ) self . wcapi = API ( url = settings . WC_API_URL , consumer_key = settings . WC_CONSUMER_KEY , consumer_secret = settings . WC_CONSUMER_SECRET , version = \"wc/v3\" ) log_info ( \"Client WooCommerce initialis\u00e9\" ) get_customers () R\u00e9cup\u00e8re tous les clients WooCommerce. Returns: Name Type Description list Liste des clients au format JSON Raises: Type Description WooCommerceAPIError Si une erreur survient lors de l'appel API Source code in core/wc_client.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 @log_procedure ( \"R\u00e9cup\u00e9ration des clients WooCommerce\" ) def get_customers ( self ): \"\"\" R\u00e9cup\u00e8re tous les clients WooCommerce. Returns: list: Liste des clients au format JSON Raises: WooCommerceAPIError: Si une erreur survient lors de l'appel API \"\"\" try : log_info ( \"R\u00e9cup\u00e9ration des clients\" ) start_time = time . time () # Log de l'appel API log_api_call ( \"WooCommerce\" , \"GET\" , \"customers\" ) # Appel \u00e0 l'API response = self . wcapi . get ( \"customers\" ) response . raise_for_status () # Log de la performance duration = time . time () - start_time log_performance ( \"R\u00e9cup\u00e9ration des clients WooCommerce\" , duration ) # Log du r\u00e9sultat customers = response . json () log_info ( f \" { len ( customers ) } clients r\u00e9cup\u00e9r\u00e9s\" ) return customers except requests . RequestException as e : error_msg = f \"Erreur lors de la r\u00e9cup\u00e9ration des clients WooCommerce : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"WooCommerce\" , \"GET\" , \"customers\" , error = str ( e )) raise WooCommerceAPIError ( error_msg ) get_orders ( status = 'processing' , after = None ) R\u00e9cup\u00e8re les commandes WooCommerce avec un statut sp\u00e9cifique et optionnellement apr\u00e8s une date donn\u00e9e. Parameters: Name Type Description Default status str Statut des commandes \u00e0 r\u00e9cup\u00e9rer (par d\u00e9faut: \"processing\") 'processing' after str Date ISO 8601 (ex: '2024-01-01T00:00:00') pour ne r\u00e9cup\u00e9rer que les commandes r\u00e9centes None Returns: Name Type Description list Liste des commandes au format JSON Raises: Type Description WooCommerceAPIError Si une erreur survient lors de l'appel API Source code in core/wc_client.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 @log_procedure ( \"R\u00e9cup\u00e9ration des commandes WooCommerce\" ) @sleep_and_retry @limits ( calls = 80 , period = 60 ) # 80 appels par minute (adapter selon quota WooCommerce) @retry ( wait = wait_exponential ( multiplier = 1 , min = 2 , max = 10 ), stop = stop_after_attempt ( 5 )) def get_orders ( self , status = \"processing\" , after = None ): \"\"\" R\u00e9cup\u00e8re les commandes WooCommerce avec un statut sp\u00e9cifique et optionnellement apr\u00e8s une date donn\u00e9e. Args: status (str): Statut des commandes \u00e0 r\u00e9cup\u00e9rer (par d\u00e9faut: \"processing\") after (str): Date ISO 8601 (ex: '2024-01-01T00:00:00') pour ne r\u00e9cup\u00e9rer que les commandes r\u00e9centes Returns: list: Liste des commandes au format JSON Raises: WooCommerceAPIError: Si une erreur survient lors de l'appel API \"\"\" try : log_info ( f \"R\u00e9cup\u00e9ration des commandes avec le statut: { status } apr\u00e8s: { after } \" ) start_time = time . time () params = { \"status\" : status } if after : params [ \"after\" ] = after # Log de l'appel API log_api_call ( \"WooCommerce\" , \"GET\" , f \"orders?status= { status } &after= { after } \" ) # Appel \u00e0 l'API response = self . wcapi . get ( \"orders\" , params = params ) response . raise_for_status () # Log de la performance duration = time . time () - start_time log_performance ( \"R\u00e9cup\u00e9ration des commandes WooCommerce\" , duration ) # Log du r\u00e9sultat orders = response . json () log_info ( f \" { len ( orders ) } commandes r\u00e9cup\u00e9r\u00e9es\" ) return orders except requests . RequestException as e : error_msg = f \"Erreur lors de la r\u00e9cup\u00e9ration des commandes WooCommerce : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"WooCommerce\" , \"GET\" , \"orders\" , error = str ( e )) raise WooCommerceAPIError ( error_msg )","title":"wc_client"},{"location":"reference/scripts/wc_client/#api-corewc_clientpy","text":"","title":"API : core/wc_client.py"},{"location":"reference/scripts/wc_client/#core.wc_client","text":"Client pour l'API WooCommerce. Ce module g\u00e8re toutes les interactions avec l'API WooCommerce, incluant : - R\u00e9cup\u00e9ration des commandes - R\u00e9cup\u00e9ration des clients - Gestion des erreurs d'API","title":"wc_client"},{"location":"reference/scripts/wc_client/#core.wc_client.WooCommerceClient","text":"Client pour interagir avec l'API WooCommerce. Utilise les param\u00e8tres de configuration pour l'authentification. Source code in core/wc_client.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 class WooCommerceClient : \"\"\" Client pour interagir avec l'API WooCommerce. Utilise les param\u00e8tres de configuration pour l'authentification. \"\"\" def __init__ ( self ): \"\"\" Initialise le client WooCommerce avec les param\u00e8tres de configuration. Utilise les variables d'environnement pour les credentials. \"\"\" log_info ( \"Initialisation du client WooCommerce\" ) self . wcapi = API ( url = settings . WC_API_URL , consumer_key = settings . WC_CONSUMER_KEY , consumer_secret = settings . WC_CONSUMER_SECRET , version = \"wc/v3\" ) log_info ( \"Client WooCommerce initialis\u00e9\" ) @log_procedure ( \"R\u00e9cup\u00e9ration des commandes WooCommerce\" ) @sleep_and_retry @limits ( calls = 80 , period = 60 ) # 80 appels par minute (adapter selon quota WooCommerce) @retry ( wait = wait_exponential ( multiplier = 1 , min = 2 , max = 10 ), stop = stop_after_attempt ( 5 )) def get_orders ( self , status = \"processing\" , after = None ): \"\"\" R\u00e9cup\u00e8re les commandes WooCommerce avec un statut sp\u00e9cifique et optionnellement apr\u00e8s une date donn\u00e9e. Args: status (str): Statut des commandes \u00e0 r\u00e9cup\u00e9rer (par d\u00e9faut: \"processing\") after (str): Date ISO 8601 (ex: '2024-01-01T00:00:00') pour ne r\u00e9cup\u00e9rer que les commandes r\u00e9centes Returns: list: Liste des commandes au format JSON Raises: WooCommerceAPIError: Si une erreur survient lors de l'appel API \"\"\" try : log_info ( f \"R\u00e9cup\u00e9ration des commandes avec le statut: { status } apr\u00e8s: { after } \" ) start_time = time . time () params = { \"status\" : status } if after : params [ \"after\" ] = after # Log de l'appel API log_api_call ( \"WooCommerce\" , \"GET\" , f \"orders?status= { status } &after= { after } \" ) # Appel \u00e0 l'API response = self . wcapi . get ( \"orders\" , params = params ) response . raise_for_status () # Log de la performance duration = time . time () - start_time log_performance ( \"R\u00e9cup\u00e9ration des commandes WooCommerce\" , duration ) # Log du r\u00e9sultat orders = response . json () log_info ( f \" { len ( orders ) } commandes r\u00e9cup\u00e9r\u00e9es\" ) return orders except requests . RequestException as e : error_msg = f \"Erreur lors de la r\u00e9cup\u00e9ration des commandes WooCommerce : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"WooCommerce\" , \"GET\" , \"orders\" , error = str ( e )) raise WooCommerceAPIError ( error_msg ) @log_procedure ( \"R\u00e9cup\u00e9ration des clients WooCommerce\" ) def get_customers ( self ): \"\"\" R\u00e9cup\u00e8re tous les clients WooCommerce. Returns: list: Liste des clients au format JSON Raises: WooCommerceAPIError: Si une erreur survient lors de l'appel API \"\"\" try : log_info ( \"R\u00e9cup\u00e9ration des clients\" ) start_time = time . time () # Log de l'appel API log_api_call ( \"WooCommerce\" , \"GET\" , \"customers\" ) # Appel \u00e0 l'API response = self . wcapi . get ( \"customers\" ) response . raise_for_status () # Log de la performance duration = time . time () - start_time log_performance ( \"R\u00e9cup\u00e9ration des clients WooCommerce\" , duration ) # Log du r\u00e9sultat customers = response . json () log_info ( f \" { len ( customers ) } clients r\u00e9cup\u00e9r\u00e9s\" ) return customers except requests . RequestException as e : error_msg = f \"Erreur lors de la r\u00e9cup\u00e9ration des clients WooCommerce : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"WooCommerce\" , \"GET\" , \"customers\" , error = str ( e )) raise WooCommerceAPIError ( error_msg )","title":"WooCommerceClient"},{"location":"reference/scripts/wc_client/#core.wc_client.WooCommerceClient.wcapi","text":"","title":"wcapi"},{"location":"reference/scripts/wc_client/#core.wc_client.WooCommerceClient.__init__","text":"Initialise le client WooCommerce avec les param\u00e8tres de configuration. Utilise les variables d'environnement pour les credentials. Source code in core/wc_client.py 27 28 29 30 31 32 33 34 35 36 37 38 39 def __init__ ( self ): \"\"\" Initialise le client WooCommerce avec les param\u00e8tres de configuration. Utilise les variables d'environnement pour les credentials. \"\"\" log_info ( \"Initialisation du client WooCommerce\" ) self . wcapi = API ( url = settings . WC_API_URL , consumer_key = settings . WC_CONSUMER_KEY , consumer_secret = settings . WC_CONSUMER_SECRET , version = \"wc/v3\" ) log_info ( \"Client WooCommerce initialis\u00e9\" )","title":"__init__"},{"location":"reference/scripts/wc_client/#core.wc_client.WooCommerceClient.get_customers","text":"R\u00e9cup\u00e8re tous les clients WooCommerce. Returns: Name Type Description list Liste des clients au format JSON Raises: Type Description WooCommerceAPIError Si une erreur survient lors de l'appel API Source code in core/wc_client.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 @log_procedure ( \"R\u00e9cup\u00e9ration des clients WooCommerce\" ) def get_customers ( self ): \"\"\" R\u00e9cup\u00e8re tous les clients WooCommerce. Returns: list: Liste des clients au format JSON Raises: WooCommerceAPIError: Si une erreur survient lors de l'appel API \"\"\" try : log_info ( \"R\u00e9cup\u00e9ration des clients\" ) start_time = time . time () # Log de l'appel API log_api_call ( \"WooCommerce\" , \"GET\" , \"customers\" ) # Appel \u00e0 l'API response = self . wcapi . get ( \"customers\" ) response . raise_for_status () # Log de la performance duration = time . time () - start_time log_performance ( \"R\u00e9cup\u00e9ration des clients WooCommerce\" , duration ) # Log du r\u00e9sultat customers = response . json () log_info ( f \" { len ( customers ) } clients r\u00e9cup\u00e9r\u00e9s\" ) return customers except requests . RequestException as e : error_msg = f \"Erreur lors de la r\u00e9cup\u00e9ration des clients WooCommerce : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"WooCommerce\" , \"GET\" , \"customers\" , error = str ( e )) raise WooCommerceAPIError ( error_msg )","title":"get_customers"},{"location":"reference/scripts/wc_client/#core.wc_client.WooCommerceClient.get_orders","text":"R\u00e9cup\u00e8re les commandes WooCommerce avec un statut sp\u00e9cifique et optionnellement apr\u00e8s une date donn\u00e9e. Parameters: Name Type Description Default status str Statut des commandes \u00e0 r\u00e9cup\u00e9rer (par d\u00e9faut: \"processing\") 'processing' after str Date ISO 8601 (ex: '2024-01-01T00:00:00') pour ne r\u00e9cup\u00e9rer que les commandes r\u00e9centes None Returns: Name Type Description list Liste des commandes au format JSON Raises: Type Description WooCommerceAPIError Si une erreur survient lors de l'appel API Source code in core/wc_client.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 @log_procedure ( \"R\u00e9cup\u00e9ration des commandes WooCommerce\" ) @sleep_and_retry @limits ( calls = 80 , period = 60 ) # 80 appels par minute (adapter selon quota WooCommerce) @retry ( wait = wait_exponential ( multiplier = 1 , min = 2 , max = 10 ), stop = stop_after_attempt ( 5 )) def get_orders ( self , status = \"processing\" , after = None ): \"\"\" R\u00e9cup\u00e8re les commandes WooCommerce avec un statut sp\u00e9cifique et optionnellement apr\u00e8s une date donn\u00e9e. Args: status (str): Statut des commandes \u00e0 r\u00e9cup\u00e9rer (par d\u00e9faut: \"processing\") after (str): Date ISO 8601 (ex: '2024-01-01T00:00:00') pour ne r\u00e9cup\u00e9rer que les commandes r\u00e9centes Returns: list: Liste des commandes au format JSON Raises: WooCommerceAPIError: Si une erreur survient lors de l'appel API \"\"\" try : log_info ( f \"R\u00e9cup\u00e9ration des commandes avec le statut: { status } apr\u00e8s: { after } \" ) start_time = time . time () params = { \"status\" : status } if after : params [ \"after\" ] = after # Log de l'appel API log_api_call ( \"WooCommerce\" , \"GET\" , f \"orders?status= { status } &after= { after } \" ) # Appel \u00e0 l'API response = self . wcapi . get ( \"orders\" , params = params ) response . raise_for_status () # Log de la performance duration = time . time () - start_time log_performance ( \"R\u00e9cup\u00e9ration des commandes WooCommerce\" , duration ) # Log du r\u00e9sultat orders = response . json () log_info ( f \" { len ( orders ) } commandes r\u00e9cup\u00e9r\u00e9es\" ) return orders except requests . RequestException as e : error_msg = f \"Erreur lors de la r\u00e9cup\u00e9ration des commandes WooCommerce : { e } \" log_error ( error_msg , exc_info = e ) log_api_call ( \"WooCommerce\" , \"GET\" , \"orders\" , error = str ( e )) raise WooCommerceAPIError ( error_msg )","title":"get_orders"},{"location":"reference/utils/database/","text":"","title":"database"},{"location":"reference/utils/helpers/","text":"","title":"helpers"},{"location":"reference/utils/logger/","text":"","title":"logger"}]}